class Solution:
    def findNumberOfLIS(self, nums: List[int]) -> int:
        
        size = len(nums)
        
        dp = [1]*size
        freq = [1]*size
        result = 0
        
        for j in range(1, size):
            for i in range(j):
                if nums[i] < nums[j]:
                    if dp[i] +1 > dp[j]:
                        dp[j] = dp[i] +1
                        # how many ways we get to i, thats us now
                        freq[j] = freq[i]
                    elif dp[i] +1 == dp[j]:
                        # how manys you can get to i, add it to j now
                        freq[j] += freq[i]
       
        maxLen = max(dp)
        for i in range(size):
            if dp[i] == maxLen:
                result += freq[i]

        return result
            
            
           size = len(nums)
        totalSum = sum(nums)
        halfSum = totalSum // 2
        
        if totalSum % 2  == 1:
            return False
        
        dp1 = [False for i in range(halfSum + 1)]
        dp2 = [False for i in range(halfSum + 1)]
        
        dp1[0] = True
        
        for i in range(size):
            for j in range(halfSum + 1):
                if j - nums[i-1] >= 0:
                    dp2[j] = dp1[j] or dp1[j-nums[i-1]]
                else:
                    dp2[j] = dp1[j]
            
            dp1 = dp2
            dp2 = [False for i in range(halfSum + 1)]
    
        return dp1[-1]
         
                        
        
                
                
            
