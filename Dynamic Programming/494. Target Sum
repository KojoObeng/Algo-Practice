class Solution(object):
    def findTargetSumWays(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        size = len(nums)
        sumCounter = {0: 1}
        
        for idx in range(size):
            print(sumCounter)
            next = defaultdict(lambda: 0)
            for possibleSum in sumCounter.keys():
                posCurrSum = nums[idx] + possibleSum
                negCurrSum = -1*nums[idx] + possibleSum
                
                next[posCurrSum] += sumCounter[possibleSum]
                next[negCurrSum] += sumCounter[possibleSum]
                    
            sumCounter = next

        return sumCounter[target]
                    
                
                    
                            
        
        
        
        class Solution:
            def findTargetSumWays(self, nums: List[int], target: int) -> int:
                totalSum = sum(nums)
                
                if abs(target) > abs(totalSum):
                    return 0
                
                dp = [0]*(2*totalSum +1)
                
                dp[-nums[0] + totalSum] += 1
                dp[nums[0] + totalSum] +=1
                
                for i in range(1, len(nums)):
                    next = [0]*(2*totalSum +1)
                    
                    for idx in range(len(dp)):
                        if (dp[idx] > 0):
                            next[idx + nums[i]] += dp[idx] 
                            next[idx - nums[i]] += dp[idx]
                    print(next)
                    dp = next
                
                return dp[target + totalSum]
        
        
        
        
        
        
        
        size = len(nums)
        totalSum = sum(nums)
        # seen = [[None for i in range(2*totalSum+1)] for i in range(size)]
        seen = {}
        
        
        def dfs(idx, sum):
            if idx == size:
                if sum == target:
                    return 1
                else:
                    return 0
            else:
                if (idx,sum) in seen:
                    return seen[(idx,sum)]
                else:
                    seen[(idx, sum)] = dfs(idx+1, sum+nums[idx]) + dfs(idx+1, sum-nums[idx])
                    return seen[(idx,sum)]

        
        return dfs(0, 0)
        