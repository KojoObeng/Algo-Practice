  class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        dp = [0]*(amount+1)
        
        dp[0] = 0
        
        for i in range(1, amount+1):
            
            dp[i] = float("inf")
            for j in range(len(coins)):               
                if (i >= coins[j]):
                    dp[i] = min(dp[i], dp[i-coins[j]]+1)
                    
        return dp[-1] if dp[-1] != inf else -1
                
                
            
         
  Top-Down Interative  BFS 

        # Idea is count +=1 for each new row of the BFS
        result = -1
        if amount == 0:
            return 0
        
        dp = [0]*(amount+1)
        dp[0] = 0
        visited = [False]*(amount +1)
        visited[0] = True 
        
        queue = [amount]
        curr = amount
        count = 1
       
        while queue:
            size = len(queue)
            
            for i in range(size):
                curr = queue.pop(0)

                for coin in coins:
                    
                    child = curr - coin

                    if child == 0:
                        return count
                    elif (child > 0 and not visited[child]):
                        queue.append(child)
                        visited[child] = True

            count += 1
        
        return -1


Bottom up DP

        result = -1
        if amount == 0:
            return 0
        
        dp = [float("inf")]*(amount+1)
        dp[0] = 0
        
        for i in range(1,amount+1):
            lower_amounts = [dp[i-coin] for coin in coins if (i - coin >= 0)]
            if lower_amounts:
                dp[i] = min(lower_amounts) + 1
        
        if dp[-1] == float("inf"):
            return -1
        else:
            return dp[-1]


            