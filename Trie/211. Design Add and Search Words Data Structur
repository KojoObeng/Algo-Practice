class TrieNode():
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.isWord = False


class WordDictionary(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()
        

    def addWord(self, word):
        """
        :type word: str
        :rtype: None
        """
        node  = self.root
        for w in word:
            node = node.children[w]
        node.isWord = True
        

    def search(self, word):
        """
        :type word: str
        :rtype: bool
        """
        
        node  = self.root
        self.found = False
        self.dfs(node, word)
        return self.found
    
    def dfs(self, node, word):
        if not word and node.isWord:
            self.found = True
        elif not word:
            return
        elif word[0] == ".":
            for child in node.children.values():
                self.dfs(child, word[1:])
        else:
            node = node.children.get(word[0])
            if not node:
                return
            else:
                self.dfs(node, word[1:])
                
                
            


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)