class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        
        def twoSumII(idx, nums, target):
            high = len(nums)-1
            low = idx + 1
            
            while high > low:
                currSum = nums[high] + nums[low]
                if currSum > target:
                    high -=1
                elif currSum < target:
                    low +=1
                else:
                    # only have to adjust for duplicates after you pick one
                    self.result.append([nums[idx], nums[low], nums[high]])
                    low +=1
                    high -=1
                    while high > low and nums[low] == nums[low-1]:
                        low +=1
                        
                        
        
        size = len(nums)
        nums.sort()
        self.result = []
        
        for i in range(size):
            if nums[i] > 0:
                break
            
            if i == 0 or nums[i-1] != nums[i]:
                twoSumII(i, nums,  nums[i]*-1)
                
                

        
        return self.result


class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        
        def twoSum(idx, nums, target):
            size = len(nums)
            seen = set()
            
            for i in range(idx +1, size):
                if nums[i] not in seen:
                    seen.add(target - nums[i])
                else:
                    self.result.add((-1*target, nums[i], target - nums[i]))
                
        
        size = len(nums)
        nums.sort()
        self.result = set()
        
        for i in range(size):
            if nums[i] > 0:
                break
                
            if i == 0 or nums[i-1] != nums[i]:
                twoSum(i, nums, nums[i]*-1)
                
                
        return map(list, self.result)
            
                    
                
            
            
            