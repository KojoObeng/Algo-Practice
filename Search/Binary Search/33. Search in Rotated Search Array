class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        index = float('-inf')
        low = 0
        high = len(nums)-1
        result = -1
        
        # Find Rotation
        # Get rid or 'OR EQUAL TO" in the while loop
        # Only change one to mid+1/-1,
        # LOW and HIGH will converge to that value
        while high > low:
            mid = low + (high-low)/2
            if nums[mid] > nums[high]:
                low = mid+1
            else:
                high = mid
        
        lowest = low
        print(lowest)
        
        # Find where the middle is and start searching in the other way
        # We know from 0 to the end is straight, so check there, else otherwise.
        if target >= nums[lowest] and target <= nums[len(nums)-1]:
            low = lowest
            high = len(nums) -1
        else:
            low = 0
            high = lowest
        
        
        while high >= low:
            mid = low + (high-low)/2
            if nums[mid] == target:
                result = mid
                break
            elif nums[mid] > target:
                high = mid-1
            else: 
                low = mid+1
            
        return result