class Solution(object):
    def rotate(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify matrix in-place instead.
        """
        
        n = len(matrix)
        
        for layer in range(n//2):
            for idx in range(layer, n-layer-1):
                
                # Tmp the the first vairable you would be replacing
                tmp = matrix[idx][n-1-layer]
                matrix[idx][n-1-layer] = matrix[layer][idx]
                matrix[layer][idx] = matrix[n-1-idx][layer]
                matrix[n-1-idx][layer] = matrix[n-1-layer][n-1-idx]
                matrix[n-1-layer][n-1-idx] = tmp
       
        return matrix
    



    ##### Transpose and reflect

    class Solution(object):
    def rotate(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify matrix in-place instead.
        """
        
        n = len(matrix)
        
        # y=x transpose
        for row in range(n):
            for col in range(n-1-row):
                tmp = matrix[row][col]
                matrix[row][col] = matrix[n-1-col][n-1-row]
                matrix[n-1-col][n-1-row] = tmp
        
        for row in range(n/2):
            for col in range(n):
                temp = matrix[row][col]
                matrix[row][col] = matrix[n-1-row][col]
                matrix[n-1-row][col] = temp
                
            
        
        
        
        


    