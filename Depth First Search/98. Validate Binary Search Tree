# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        
        def isValid(root, highestSeen, lowestSeen):
            if not root:
                return True
            elif (root.val <= highestSeen) or (root.val >= lowestSeen):
                return False
            else:
                return isValid(root.left, highestSeen, root.val) and isValid(root.right, root.val, lowestSeen)
            
        return isValid(root, float("-inf"),  float("inf"))
        

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        
        
        self.prev = float("-inf")
        
        def isValidNode(root):
            if not root:
                return True
            
            
            if not isValidNode(root.left):
                return False
            
            if not root.val > self.prev:
                return False
            
            self.prev = root.val
            
            return isValidNode(root.right)
        
        
        
        return isValidNode(root)
    
            
        