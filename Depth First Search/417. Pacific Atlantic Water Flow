class Solution(object):
    def pacificAtlantic(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        if not matrix:
            return matrix
        result = []   
        self.directions = [(1,0),(-1,0),(0,1),(0,-1)]
        m = len(matrix)
        n = len(matrix[0])
        pacific = [[False for j in range(n)] for i in range(m)]
        atlantic = [[False for j in range(n)] for i in range(m)]
        self.m = m
        self.n = n
        for i in range(m):
            self.dfs(matrix, pacific, i, 0)
            self.dfs(matrix, atlantic, i, n-1)
            
        for i in range(n):
            self.dfs(matrix, pacific, 0, i)
            self.dfs(matrix, atlantic, m-1, i)
        
        for row in range(m):
            for col in range(n):
                if pacific[row][col] and atlantic[row][col]:
                    result.append([row, col])
        
        return result
    
    def dfs(self, matrix, ocean, row, col):
        ocean[row][col] = True
        for direction in self.directions:
            x = row + direction[0]
            y = col + direction[1]
            if x < 0 or x >= self.m or y < 0 or y >= self.n or ocean[x][y] or matrix[x][y] < matrix[row][col]:
                continue
            else:
                self.dfs(matrix, ocean, x, y)

        
    
## Different way same thing, less space more time

class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        self.matrix = heights
        self.rows = len(heights)
        self.cols = len(heights[0])
        self.directions = ((1, 0), (-1, 0), (0, -1), (0, 1))
        
        pacific = set()
        atlantic = set()
        
        for row in range(self.rows):
            self.dfs(row, 0, pacific)
            self.dfs(row, self.cols-1, atlantic)
        
        for col in range(self.cols):
            self.dfs(0, col, pacific)
            self.dfs(self.rows-1, col, atlantic)
            
        return list(pacific & atlantic)
    
    
    def dfs(self, row, col, visited):
        visited.add((row, col))
        for direction in self.directions:
            new_row, new_col = row + direction[0], col + direction[1]
            if (new_row >= 0) and (new_row <= self.rows-1) and (new_col >= 0) and (new_col <= self.cols-1) and (self.matrix[new_row][new_col] >= self.matrix[row][col]) and (new_row, new_col) not in visited:
                self.dfs(new_row, new_col, visited)
                
                
    
    
        
            
        
                