def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:
    
    
    def getMax(startIndex, endIndex):
        if startIndex >= endIndex:
            return
        
        maxIndex = nums.index(max(nums[startIndex:endIndex]))
        newRoot = TreeNode(nums[maxIndex])
        newRoot.left = getMax(startIndex, maxIndex)
        newRoot.right = getMax(maxIndex + 1, endIndex)
        
        return newRoot
        
    
    return getMax(0, len(nums))


class Solution:
    def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:
        
        stack = []
        
        
        for num in nums:
            currNode = TreeNode(num)
            last = None
            while stack and stack[-1].val < num:
                last = stack.pop()
            
            currNode.left = last
            if stack: stack[-1].right = currNode
            stack.append(currNode)
            
        return stack[0]