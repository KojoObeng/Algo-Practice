    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        
        queue = deque([(root, 0)])
        maxWidth = 1
        
        while queue:
            size = len(queue)
            firstElem = queue[0][1]
            for i in range(size):
                curr, currVal = queue.popleft()
                if curr.left:
                    queue.append((curr.left, 2*currVal))
                    level.append(2*currVal)
                if curr.right:
                    queue.append((curr.right, 2*currVal +1))
                    level.append(2*currVal+1)
            if level:    
                maxWidth = max(maxWidth, level[-1] - level[0] +1)
        
        return maxWidth

def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        
        self.depthDict = {}
        self.maxWidth = 1
        
        def dfs(root, depth, rootVal):
            if not root:
                return
            if depth not in self.depthDict:
                self.depthDict[depth] = rootVal
                
            self.maxWidth = max(self.maxWidth, rootVal - self.depthDict[depth] +1)
            
            dfs(root.left, depth + 1, 2*rootVal)
            dfs(root.right, depth + 1, 2*rootVal+1)
            
        dfs(root, 0, 0)
        return self.maxWidth