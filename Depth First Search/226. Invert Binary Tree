def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
    if not root:
        return root
    root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)
    return root

### Iterative

stack = [root]

while stack: 
    curr = stack.pop()
    if curr:
        curr.left, curr.right = curr.right, curr.left
        stack.append(curr.right)
        stack.append(curr.left)

return root
            
        
        
        
    