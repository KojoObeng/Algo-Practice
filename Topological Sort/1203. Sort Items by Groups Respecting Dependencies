class Solution:
    def sortItems(self, n: int, m: int, group: List[int], beforeItems: List[List[int]]) -> List[int]:
        
        def getTopOrder(outNeigh, inDegree, seen):
        
            queue = deque([item for item in range(seen) if item not in inDegree])
            print(outNeigh, inDegree, seen)
            result = []
            
            while queue:
                qSize = len(queue)
                for i in range(qSize):
                    curr = queue.popleft()
                    result.append(curr)
                    for neigh in outNeigh[curr]:
                        inDegree[neigh] -= 1
                        if not inDegree[neigh]:
                            queue.append(neigh)
                            
            return result if len(result) == seen else None
        
        
        for idx in range(n):
            if group[idx] == -1:
                group[idx] = m
                m +=1
        
        
        
        outNeighItem = defaultdict(set)
        inDegreeItem = defaultdict(int)
        
        outNeighGroup = defaultdict(set)
        inDegreeGroup = defaultdict(int)
        
        for item in range(n):
            for before in beforeItems[item]:
                outNeighItem[before].add(item)
                inDegreeItem[item] += 1
                if group[item] != group[before]:
                    if group[item] not in outNeighGroup[group[before]]:
                        outNeighGroup[group[before]].add(group[item])
                        inDegreeGroup[group[item]] += 1
                    
        
        groupTopOrder = getTopOrder(outNeighGroup, inDegreeGroup, m)
        itemTopOrder = getTopOrder(outNeighItem, inDegreeItem, n)
        
        if not itemTopOrder or not groupTopOrder:
            return []
        else:
            result = []
            itemOrderDict = defaultdict(list)
            
            for item in itemTopOrder:
                itemOrderDict[group[item]].append(item)
                
            for group in groupTopOrder:
                result += itemOrderDict[group]
                
            return result
                
        
                    
                    
                
                
        
        