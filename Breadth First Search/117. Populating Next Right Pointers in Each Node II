        if not root:
            return root
        
        queue = deque([root])
        
        while queue:
            size = len(queue)
            level = []
            for i in range(size):
                curr = queue.popleft()
                if curr.left:
                    queue.append(curr.left)
                if curr.right:
                    queue.append(curr.right)
                if i == size -1:
                    curr.next = None
                else:
                    curr.next = queue[0]
        
        return root

 class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        
        result = []
        
        def dfs(node, level):
            if not node:
                return
            if level == len(result):
                result.append(node.val)
                
            dfs(node.right, level +1)
            dfs(node.left, level + 1)
            
        
        dfs(root, 0)
            

        return result       