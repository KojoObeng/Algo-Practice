# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        
        
        if not root:
            return 
        result = []
        reverse = True
        queue = deque([root])
        
        while queue:
            level = []
            for i in range(len(queue)):
                if reverse:
                    curr = queue.popleft()
                    level.append(curr.val)
                    if curr.left:
                        queue.append(curr.left)
                    if curr.right:
                        queue.append(curr.right)
                    
                else:
                    curr = queue.pop()
                    level.append(curr.val)
                    if curr.right:
                        queue.appendleft(curr.right)
                    if curr.left:
                        queue.appendleft(curr.left)
                    
            reverse = not reverse
            result.append(level)

        return result


"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Optional[Node]') -> 'Optional[Node]':
        
        if not root:
            return root
        
        curr = root
        
        #While we at not at the last level
        while curr.left:
            
            head = curr
            
            # go across the level
            while head:
                head.left.next = head.right
                
                if head.next:
                    head.right.next = head.next.left
                    
                head = head.next
            
            curr = curr.left
        
        return root
                    
                    
                    
                
        