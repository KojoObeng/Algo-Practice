# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        
        result = []
        
        def subtree_add(node, distance):
            if not node:
                return
            if distance == k:
                result.append(node.val)
                return
            subtree_add(node.left, distance +1)
            subtree_add(node.right, distance +1)
            
            
            
        def dfs(node):
            if not node:
                return float("-inf")
            elif node == target:
                subtree_add(node, 0)
                return 0
            
            left_distance = dfs(node.left)
            right_distance = dfs(node.right)
            
            if left_distance >=0:
                if left_distance + 1 == k:
                    result.append(node.val)
                subtree_add(node.right, left_distance + 2)
                return left_distance + 1
            elif right_distance >=0:
                if right_distance + 1 == k:
                    result.append(node.val)
                subtree_add(node.left, right_distance + 2)
                return right_distance + 1
            else:
                return float("-inf")
                
        dfs(root)
        return result
        

# BFS

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:

        result = []
        parentMap = {}

        def storeParent(node, parent):
            if not node:
                return
            else:
                parentMap[node] = parent
                storeParent(node.left, node)
                storeParent(node.right, node)

        storeParent(root, None)

        queue = deque([target])
        seen = [target]
        level = 0

        while queue:
            for i in range(len(queue)):
                curr = queue.popleft()
                if level == k:
                    result.append(curr.val)
                if curr.left and curr.left not in seen:
                    queue.append(curr.left)
                    seen.append(curr.left)
                if curr.right and curr.right not in seen:
                    queue.append(curr.right)
                    seen.append(curr.right)
                currParent = parentMap[curr]
                if currParent and currParent not in seen:
                    queue.append(currParent)
                    seen.append(currParent)
            level += 1

        return result
