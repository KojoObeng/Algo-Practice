# DFS

All recursive

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution:
    # Definition for a binary tree node.
    # class TreeNode:
    #     def __init__(self, x):
    #         self.val = x
    #         self.left = None
    #         self.right = None


class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:

        result = []

        if not root:
            return root

        def countFromNode(root, count):
            if not root:
                return
            if count == k:
                result.append(root.val)
            else:
                countFromNode(root.left, count + 1)
                countFromNode(root.right, count + 1)

        def dfs(root):
            if not root:
                return -1
            elif (root.val == target.val):
                countFromNode(root, 0)
                return 0
            else:
                L, R = dfs(root.left), dfs(root.right)
                if (L >= 0):
                    if L + 1 == k:
                        result.append(root.val)
                    else:
                        countFromNode(root.right, L + 2)
                    return L+1
                elif (R >= 0):
                    if R + 1 == k:
                        result.append(root.val)
                    else:
                        countFromNode(root.left, R + 2)
                    return R+1
                else:
                    return -1

        dfs(root)
        return result

# BFS

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:

        result = []
        parentMap = {}

        def storeParent(node, parent):
            if not node:
                return
            else:
                parentMap[node] = parent
                storeParent(node.left, node)
                storeParent(node.right, node)

        storeParent(root, None)

        queue = deque([target])
        seen = [target]
        level = 0

        while queue:
            for i in range(len(queue)):
                curr = queue.popleft()
                if level == k:
                    result.append(curr.val)
                if curr.left and curr.left not in seen:
                    queue.append(curr.left)
                    seen.append(curr.left)
                if curr.right and curr.right not in seen:
                    queue.append(curr.right)
                    seen.append(curr.right)
                currParent = parentMap[curr]
                if currParent and currParent not in seen:
                    queue.append(currParent)
                    seen.append(currParent)
            level += 1

        return result
