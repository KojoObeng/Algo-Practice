class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        
        mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', 
                   '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        
        
        soln = []
        return self.dfs(digits, mapping, "", [], 0)
        
    def dfs(self, digits, mapping, curr, soln, idx):
        if len(curr) == len(digits):
            soln.append(curr)
        else:
            for letter in mapping[digits[idx]]:
                curr += letter
                self.dfs(digits, mapping, curr, soln, idx+1)
                curr = curr[:-1]
            return soln